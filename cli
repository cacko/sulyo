#!/usr/bin/env python

import argparse
import subprocess
import sys
import os
from pathlib import Path
from subprocess import Popen, PIPE, STDOUT
from shlex import join
import platform

sys.stdout = os.fdopen(sys.stdout.fileno(), "w", 1)  # line buffering
REMOTE_HOST = "pi4"
ON_PROD = platform.node() in [REMOTE_HOST]
REMOTE_PATH = "/home/jago/botyo"
SERVICE_NAME = "botyo"

PARSER = argparse.ArgumentParser()
PARSER.add_argument("-c", "--gitpush", action="store_true", help="git push")
PARSER.add_argument("-p", "--gitpull", action="store_true", help="git pull")
PARSER.add_argument(
    "-d",
    "--deploy",
    action="store_true",
    help="executes stop, gitpull,restart",
)
PARSER.add_argument("-k", "--stop", action="store_true", help="stop server")
PARSER.add_argument("-r", "--restart", action="store_true", help="restart server")
PARSER.add_argument("-l", "--logs", action="store_true", help="show logs")
PARSER.add_argument("-i", "--install", action="store_true", help="poetry install")
PARSER.add_argument("remote", nargs="?", default=REMOTE_HOST, help="pi4")


class Deploy:

    root = Path(__file__).parent
    paths = {}
    remoteHost = REMOTE_HOST

    locals = ["gitpush"]

    @property
    def python(self):
        return self._which("python")

    @property
    def poetry(self):
        return self._which("poetry")

    @property
    def dotenv(self):
        return self._which("dotenv")

    @property
    def git(self):
        return self._which("git")

    @property
    def environment(self):
        return dict(
            os.environ,
            PATH=f"/home/jago/.pyenv/plugins/pyenv-virtualenv/shims:/home/jago/.pyenv/shims:/home/jago/.pyenv/bin:/home/jago/.local/bin:/usr/local/bin:/usr/bin:/bin:/usr/games"
        )

    def run(self):
        os.chdir(self.root)
        for f, e in self.__dict__.items():
            if e and hasattr(self, F"run_{f}"):
                self._exec(f)

    def _exec(self, f):
        if not ON_PROD and f not in self.locals:
            self._log(F".!. Executing on {self.remoteHost}")
            self._run(
                "ssh", self.remoteHost, F"{REMOTE_PATH}/zcli {self.remote} --{f}"
            )
        else:
            getattr(self, f"run_{f}")()

    def _log(self, message):
        print(f"\n({platform.node()}) >> {message}")

    def _which(self, exe):
        if not exe in self.paths:
            with Popen(
                ["which", exe], stdout=PIPE, stderr=STDOUT, env=self.environment
            ) as p:
                for line in iter(p.stdout.readline, b""):
                    self.paths[exe] = line.decode().strip()
                    break
                if p.returncode:
                    sys.exit(1)
        return self.paths.get(exe)

    def run_deploy(self):
        self.run_stop()
        self.run_gitpull()
        self.run_restart()

    def run_gitpull(self):
        self._git("reset", "--hard")
        self._git("pull")

    def run_restart(self):
        self._log(f"restart service {SERVICE_NAME}...")
        self._run("systemctl", "--user", "restart", SERVICE_NAME)

    def run_stop(self):
        self._log(f"stopping service {SERVICE_NAME}...")
        self._run("systemctl", "--user", "stop", SERVICE_NAME)

    def run_install(self):
        self._log(f"poetry install...")
        self._poetry("install")

    def run_gitpush(self):
        self._log(f"git commit...")
        subprocess.call(
            f'{self.git} commit -am "$(curl -s https://commit.cacko.net/index.txt)"',
            shell=True,
        )
        self._git("push")

    def run_logs(self):
        self._run("journalctl", "--user-unit", SERVICE_NAME, "-f")

    def _git(self, *args):
        self._run(self.git, *args)

    def _poetry(self, *args):
        self._run(self.poetry, *args)

    def _run(self, *cmd):
        self._log(f"{join(cmd)}")
        return subprocess.call(
            join(cmd),
            shell=True,
            env=self.environment,
        )


if __name__ == "__main__":
    try:
        deploy = Deploy()
        PARSER.parse_args(namespace=deploy)
        deploy.run()
    except KeyboardInterrupt:
        pass
